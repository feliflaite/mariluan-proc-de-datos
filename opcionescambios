
 import tkinter as tk  # Tkinter para la ventana
from urllib.request import urlopen  # Para descargar la imagen desde internet
from PIL import Image, ImageTk  # Pillow para trabajar con imágenes
from io import BytesIO  # Para convertir los datos de la imagen

# Paso 1: Descargar la imagen de internet
def descargarPortada():
    urlImagen = "https://github.com/rodripiersi/Imagenes/blob/main/Portada.png?raw=true"
    datosImagen = urlopen(urlImagen)  # Descargar la imagen
    imagenBinaria = datosImagen.read()  # Obtener los datos de la imagen
    # Paso 2: Convertir los datos binarios en una imagen que podamos mostrar
    imagen = Image.open(BytesIO(imagenBinaria))
    return imagen

def descargarFondo():
    urlImagen = "https://github.com/rodripiersi/Imagenes/blob/main/Portada.png?raw=true"
    datosImagen = urlopen(urlImagen)  # Descargar la imagen
    imagenBinaria = datosImagen.read()  # Obtener los datos de la imagen
    # Paso 2: Convertir los datos binarios en una imagen que podamos mostrar
    imagen = Image.open(BytesIO(imagenBinaria))
    return imagen

def descargarZoe1():
    urlImagen = "https://private-user-images.githubusercontent.com/206856475/443749159-7e601685-3b50-45da-8be4-dddda2a6f57c.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDc4MjkzMzksIm5iZiI6MTc0NzgyOTAzOSwicGF0aCI6Ii8yMDY4NTY0NzUvNDQzNzQ5MTU5LTdlNjAxNjg1LTNiNTAtNDVkYS04YmU0LWRkZGRhMmE2ZjU3Yy5qcGc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwNTIxJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDUyMVQxMjAzNTlaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1jZjNlMGM1YmQ3Y2U5ZmQwNTg1YzA1MmQ2MDAxMGU4NjE0Y2FjMWUyNWIyMDE5NGNhNGY5MmQ1MGRkZjNkMDgxJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.NMyt8P4T8_euufC_hbtBiftAdIsiaVa-CknCrAqGLWg"
    datosImagen = urlopen(urlImagen)  # Descargar la imagen
    imagenBinaria = datosImagen.read()  # Obtener los datos de la imagen
    # Paso 2: Convertir los datos binarios en una imagen que podamos mostrar
    imagen = Image.open(BytesIO(imagenBinaria))
    return imagen
def descargarZoe2():
    urlImagen = "blob:https://web.whatsapp.com/5dd08fa7-c408-48e8-a18e-0a72007e9814"
    datosImagen = urlopen(urlImagen)  # Descargar la imagen
    imagenBinaria = datosImagen.read()  # Obtener los datos de la imagen
    # Paso 2: Convertir los datos binarios en una imagen que podamos mostrar
    imagen = Image.open(BytesIO(imagenBinaria))
    return imagen
def descargarfeli1():
    urlImagen = "https://private-user-images.githubusercontent.com/206856475/446076020-3bf2b011-78e4-4bc2-abb0-e00a5adf1c93.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDc4MzAzNDIsIm5iZiI6MTc0NzgzMDA0MiwicGF0aCI6Ii8yMDY4NTY0NzUvNDQ2MDc2MDIwLTNiZjJiMDExLTc4ZTQtNGJjMi1hYmIwLWUwMGE1YWRmMWM5My5qcGc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwNTIxJTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDUyMVQxMjIwNDJaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT03MDVhMzFmM2RmNzZlNjg5MjdjNmRjNWJjNjIzYTY5ZTQ5OGM2ZjA4ZTRmMzZmMzUzZjg5NjI4NDgyMWNmOWNmJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.5sER8i7c7WXzElMzlNhVbmRdt5-fXH3WHo_7UMnN8wU"
    datosImagen = urlopen(urlImagen)  # Descargar la imagen
    imagenBinaria = datosImagen.read()  # Obtener los datos de la imagen
    # Paso 2: Convertir los datos binarios en una imagen que podamos mostrar
    imagen = Image.open(BytesIO(imagenBinaria))
    return imagen
def descargarfeli2():
    urlImagen = "blob:https://web.whatsapp.com/8c43be4e-c87e-4540-a893-a9a69575acea"
    datosImagen = urlopen(urlImagen)  # Descargar la imagen
    imagenBinaria = datosImagen.read()  # Obtener los datos de la imagen
    # Paso 2: Convertir los datos binarios en una imagen que podamos mostrar
    imagen = Image.open(BytesIO(imagenBinaria))
    return image

def mostrarOpcion1():
    limpiarVentana()
    label = tk.Label(ventana, text="Elegiste la Opción 1", font=("Arial", 16))
    label.pack(pady=20)

    boton_volver = tk.Button(ventana, text="Volver", font=("Arial", 12), command=mostrarMenu)
    boton_volver.pack(pady=10)

def mostrarOpcion2():
    limpiarVentana()
    label = tk.Label(ventana, text="Elegiste la Opción 2", font=("Arial", 16))
    label.pack(pady=20)

    boton_volver = tk.Button(ventana, text="Volver", font=("Arial", 12), command=mostrarMenu)
    boton_volver.pack(pady=10)

def mostrarOpcion3():
    limpiarVentana()
    label = tk.Label(ventana, text="Elegiste la Opción 3", font=("Arial", 16))
    label.pack(pady=20)

    boton_volver = tk.Button(ventana, text="Volver", font=("Arial", 12), command=mostrarMenu)
    boton_volver.pack(pady=10)

def mostrarOpcion4():
    limpiarVentana()
    label = tk.Label(ventana, text="Elegiste la Opción 4", font=("Arial", 16))
    label.pack(pady=20)

    boton_volver = tk.Button(ventana, text="Volver", font=("Arial", 12), command=mostrarMenu)
    boton_volver.pack(pady=10)

def limpiarVentana():  
    # Recorremos todos los widgets (elementos gráficos) que están dentro de la ventana
    for widget in ventana.winfo_children():  
        # Eliminamos cada widget para limpiar la ventana completamente
        widget.destroy()
    
def mostrarMenu():
    limpiarVentana()
    label = tk.Label(ventana, text="Menú Principal", font=("Arial", 18, "bold"))
    label.pack(pady=20)

    boton1 = tk.Button(ventana, text="Opción 1", font=("Arial", 14), width=20, command=mostrarOpcion1)
    boton1.pack(pady=10)

    boton2 = tk.Button(ventana, text="Opción 2", font=("Arial", 14), width=20, command=mostrarOpcion2)
    boton2.pack(pady=10)

    boton3 = tk.Button(ventana, text="Opción 3", font=("Arial", 14), width=20, command=mostrarOpcion3)
    boton3.pack(pady=10)

    boton4 = tk.Button(ventana, text="Opción 4", font=("Arial", 14), width=20, command=mostrarOpcion4)
    boton4.pack(pady=10)


def main():
    global ventana
    # Crear la ventana principal
    ventana = tk.Tk()
    ventana.geometry("400x300")
    ventana.title("Menú Centrado")

    
    # Mostrar el menú visual al inicio
    mostrarMenu()

    ventana.mainloop()
if __name__=="__main__" :
    main()

